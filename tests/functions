run() {
	set -e
	setup

	verdict=failed
	run_tc
	verdict=passed
	exit 0
}

run_tc() {
	if [ "$VERBOSE" -lt 2 ]; then
		testcase 2>/dev/null 1>&2
	else
		testcase
	fi
}

setup() {
	if [ -z "$HOST" ]; then
		echo "Environment variable HOST is not set" >&2
		exit 1
	fi

	me=${0##*/}
	mydir=${0%$me}
	testhome=$(readlink -f $mydir)
	catchdir=$(pwd)/$me.catch
	: ${VERBOSE=2}
	: ${catch_opts=testpeer}
	verdict=not_run
	exec 6>&1 # save original stdin as fd 6

	atexit cleanup
	bindir=$testhome/../build/$HOST
	for prog in push catch; do
		test -x $bindir/$prog
	done
	PATH=$bindir:$PATH

	mkdir $catchdir

	eventfifo=$catchdir/event.fifo
	mkfifo $eventfifo
	exec 5<>$eventfifo
	rm $eventfifo

	cd $catchdir
	verdict=interrupted
	$testhome/supervised_catch $catch_opts &
	catchpid=$!

	cd $testhome
	wait_event
	case $event in
		catch_ready);;
		*) exec 5<&-; exit;;
	esac
}

cleanup() {
	set +e
	kill_catch 2>/dev/null || true

	if [ "$VERBOSE" -gt 1 ] && [ -f $catchdir/catch.out ]; then
		echo "                -- catch output:"
		while read -r line; do
			echo "                $line"
		done <$catchdir/catch.out
	fi

	if [ -z "$DONT_CLEANUP" ]; then
		# Call teardown only if it was declared.
		type teardown 1>/dev/null 2>&1 && teardown
		rm -rf $catchdir
	fi

	[ "$VERBOSE" -gt 0 ] && echo "$me: $verdict" >&6
}

atexit() {
	trap "trap - INT QUIT EXIT; $1; kill -s INT $$" INT
	trap "trap - INT QUIT EXIT; $1; kill -s QUIT $$" QUIT
	trap "trap - INT QUIT EXIT; $1; exit 1" TERM
	trap "$1" EXIT
}

wait_event() {
	read event event_args <&5
}

expect_catch() {
	wait_event
	test "$event" = "$1"
}

kill_catch() {
	kill $catchpid
	wait $catchpid || true
}

should_fail() {
	! "$@"
}
