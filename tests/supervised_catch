#!/bin/sh
#
# This script runs catch and supervises it.
#
# The following events are detected and reported to fd 5
# (so the caller must provide it):
# - catch_not_run: something bad had happened even before catch was run
# - catch_ready: catch ran successfully and is ready to accept connections
# - catch_exited <rc>: catch exited with exit status <rc>
#

catchpid=
loggerpid=
signal=

emit_event() {
	echo "$@" >&5
}

silent_kill() {
	kill "$@" 2>/dev/null
}

for sig in INT QUIT TERM; do
	trap "pending_signal=$sig" $sig
done

mkfifo catch.fifo || {
	emit_event catch_not_run
	exit
}
exec 6<>catch.fifo
rm catch.fifo

while read line; do
	echo "$line" >>catch.out
	case $line in
		Initialized*)
			emit_event catch_ready;;
		"Transfer completed")
			emit_event transfer_completed;;
		"Already have this file (digests match)")
			emit_event digests_match;;
		"Digests do not match"*)
			emit_event digests_do_not_match;;
		"Rejected file"*)
			emit_event rejected;;
		"Rejected forced push"*)
			emit_event rejected_force_push;;
	esac
done <&6 &
loggerpid=$!

catch "$@" >&6 2>&1 &
catchpid=$!

while :; do
	wait $catchpid
	rc=$?
	if [ -n "$pending_signal" ]; then
		# Received a signal, terminate catch.
		silent_kill $catchpid
		signal=$pending_signal
		pending_signal=
	else
		emit_event catch_exited $rc
		break
	fi
done

silent_kill $loggerpid

if [ -n "$signal" ]; then
	trap - $signal
	kill -s $signal $$
fi
